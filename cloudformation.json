{
	"AWSTemplateFormatVersion" : "2010-09-09",
 	"Description" : "Nando Automation Demo",
  	"Parameters" : {
    		"InstanceType" : {
      			"Type" : "String",
      			"Default" : "t1.micro" 
    		},
		"NandoDemoZoneName" : {
			"Type" : "String",
			"Default" : "elasticoperations.com."	
		},
      		"NandoDemoDBName" : { 
			"Type" : "String",
			"Default" : "NandoDemoDB"
		},
      		"NandoDemoDBUser" : {
			"Type" : "String",
			"Default" : "NandoDemoDBUser"
		},
		"NandoDemoDBPass": { 
			"Type" : "String",
			"Default"  : "NandoDemoDBPass" 
		}, 
    		"KeyName": { "Type" : "AWS::EC2::KeyPair::KeyName" },
		"NandoDemoName" : { "Type" : "String" },
		"PrivateKey" : { "Type" : "String" },
    		"Location1" : { "Type": "String" },
    		"Location2" : { "Type" : "String" },
    		"Location3" : { "Type" : "String" },
    		"Location4" : { "Type" : "String" }
  	},
 	"Mappings" : {
  		"SubnetConfig" : {
   			"VPC" : { "CIDR" : "10.200.0.0/16" },
   			"Public" : { "CIDR" : "10.200.0.0/24" },
   			"Private1" : { "CIDR" : "10.200.1.0/24" },
   			"Private2" : { "CIDR" : "10.200.2.0/24" }
  		},
		"AvailabilityZone" : {
			"Public" : { "AZ" : "us-east-1c" },
			"Private1" : { "AZ" : "us-east-1d" },
			"Private2" : { "AZ" : "us-east-1e" }
		}
 	}, 
 	"Resources" : {
    		"NandoDemoJenkinsEth0" : {
      			"Type" : "AWS::EC2::NetworkInterface",
 			"DependsOn" : "NandoDemoPublicSecurityGroup",
      			"Properties" : {
        			"Description" : "eth0jenkins",
        			"SubnetId" : { "Ref" : "NandoDemoPublicSubnet" },
        			"GroupSet" : [ { "Ref" : "NandoDemoPublicSecurityGroup" } ]
      			}
    		},
    		"NandoDemoJenkinsEIP" :  {
      			"Type" : "AWS::EC2::EIP",
      			"Properties" : {
        			"Domain" : "vpc"
      			}
    		},
    		"NandoDemoJenkinsAssocEIP" : {
      			"Type" : "AWS::EC2::EIPAssociation",
			"DependsOn" : "NandoDemoJenkinsEIP",
      			"Properties" : {
        			"NetworkInterfaceId" : { "Ref" : "NandoDemoJenkinsEth0" },
        			"AllocationId" : { "Fn::GetAtt" : [ "NandoDemoJenkinsEIP", "AllocationId" ] }
      			}
    		},
 		"NandoDemoVPC" : {
  			"Type" : "AWS::EC2::VPC",
  			"Properties" : {
 				"EnableDnsSupport" : "true",
 				"EnableDnsHostnames" : "true",
 				"CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ] },
 				"Tags" : [ 
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
 					{ "Key" : "Network", "Value" : "Public" }
 				]
 			}
 		}, 
		"NandoDemoPublicSubnet" : {
 			"Type" : "AWS::EC2::Subnet",
			"DependsOn" : "NandoDemoVPC",
 			"Properties" : {
				"AvailabilityZone" : { "Fn::FindInMap" : [ "AvailabilityZone", "Public", "AZ" ] },
 				"VpcId" : { "Ref" : "NandoDemoVPC" },
 				"CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ] },
 				"Tags" : [
 					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
 					{ "Key" : "Network", "Value" : "Public" }
 				]
 			}
 		}, 
		"NandoDemoPrivateSubnet1" : {
 			"Type" : "AWS::EC2::Subnet",
			"DependsOn" : "NandoDemoVPC",
 			"Properties" : {
				"AvailabilityZone" : { "Fn::FindInMap" : [ "AvailabilityZone", "Private1", "AZ" ] },
 				"VpcId" : { "Ref" : "NandoDemoVPC" },
 				"CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Private1", "CIDR" ] },
 				"Tags" : [
 					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
 					{ "Key" : "Network", "Value" : "Private1" }
 				]
 			}
 		}, 
		"NandoDemoPrivateSubnet2" : {
 			"Type" : "AWS::EC2::Subnet",
			"DependsOn" : "NandoDemoVPC",
 			"Properties" : {
				"AvailabilityZone" : { "Fn::FindInMap" : [ "AvailabilityZone", "Private2", "AZ" ] },
 				"VpcId" : { "Ref" : "NandoDemoVPC" },
 				"CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Private2", "CIDR" ] },
 				"Tags" : [
 					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
 					{ "Key" : "Network", "Value" : "Private2" }
 				]
 			}
 		}, 
		"NandoDemoInternetGateway" : {
 			"Type" : "AWS::EC2::InternetGateway"
		}, 
		"NandoDemoInternetGatewayAttach" : {
 			"Type" : "AWS::EC2::VPCGatewayAttachment",
			"DependsOn" : "NandoDemoInternetGateway",
 			"Properties" : {
 				"VpcId" : { "Ref" : "NandoDemoVPC" },
 				"InternetGatewayId" : { "Ref" : "NandoDemoInternetGateway" }
 			}
 		}, 
		"NandoDemoPublicRouteTable" : {
 			"Type" : "AWS::EC2::RouteTable",
			"DependsOn" : "NandoDemoVPC",
 			"Properties" : {
 				"VpcId" : { "Ref" : "NandoDemoVPC" }
 			}
 		}, 
		"NandoDemoPublicRoute" : {
 			"Type" : "AWS::EC2::Route",
 			"DependsOn" : "NandoDemoInternetGatewayAttach",
 			"Properties" : {
 				"RouteTableId" : { "Ref" : "NandoDemoPublicRouteTable" },
 				"DestinationCidrBlock" : "0.0.0.0/0",
 				"GatewayId" : { "Ref" : "NandoDemoInternetGateway" }
 			}
 		}, 
		"NandoDemoPublicRouteTableAssociation" : {
 			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"DependsOn" : "NandoDemoPublicRoute",
 			"Properties" : {
 				"SubnetId" : { "Ref" : "NandoDemoPublicSubnet" },
 				"RouteTableId" : { "Ref" : "NandoDemoPublicRouteTable" }
 			}
 		}, 
    		"NandoDemoELB" : {
      			"Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
			"DependsOn" : "NandoDemoPublicRouteTableAssociation",
      			"Properties" : {
				"Subnets" : [ { "Ref" : "NandoDemoPublicSubnet" } ],
        			"Listeners" : [ 
					{ "LoadBalancerPort" : "80", "InstancePort" : "80", "Protocol" : "HTTP" },
					{ "LoadBalancerPort" : "2222", "InstancePort" : "22", "Protocol" : "TCP" }
				],
        			"HealthCheck" : {
          				"Target" : "HTTP:80/",
          				"HealthyThreshold" : "2",
          				"UnhealthyThreshold" : "5",
          				"Interval" : "5",
          				"Timeout" : "4"
        			},
				"SecurityGroups" : [ { "Ref" : "NandoDemoPublicSecurityGroup" } ]
      			}
    		},
                "NandoDemoELBDNS" : {
                        "Type" : "AWS::Route53::RecordSetGroup",
                        "DependsOn" : "NandoDemoELB",
                        "Properties" : {
                                "HostedZoneName" : { "Ref" : "NandoDemoZoneName" },
                                "RecordSets" : [ {
                                       	"Name" : { "Fn::Join" : [ ".", [ "nando-automation-demo", { "Ref" : "NandoDemoZoneName" } ] ] },
                                       	"Type" : "A",
                                       	"AliasTarget" : {
                                               	"HostedZoneId" : { "Fn::GetAtt" : [ "NandoDemoELB","CanonicalHostedZoneNameID" ] }, 
                                       	       	"DNSName" : { "Fn::GetAtt" : [ "NandoDemoELB","CanonicalHostedZoneName" ] }
                                       	}
				} ]
			}
		},
		"NandoDemoJenkinsDNS" : {
  			"Type" : "AWS::Route53::RecordSetGroup",
 			"DependsOn" : "NandoDemoJenkinsEIP",
  			"Properties" : {
    				"HostedZoneName" : { "Ref" : "NandoDemoZoneName" },
    				"RecordSets" : [ {
      					"Name" : { "Fn::Join" : [ ".", [ "nando-automation-demo-jenkins", { "Ref" : "NandoDemoZoneName" } ] ] },
      					"Type" : "A",
      					"TTL" : "900",
      					"ResourceRecords" : [ { "Ref" : "NandoDemoJenkinsEIP" } ]
    				} ]
  			}
		},
                "NandoDemoDockerDNS" : {
                        "Type" : "AWS::Route53::RecordSetGroup",
                        "DependsOn" : "NandoDemoDockerEnvironment",
                        "Properties" : {
                                "HostedZoneName" : { "Ref" : "NandoDemoZoneName" },
                                "RecordSets" : [ {
                                        "Name" : { "Fn::Join" : [ ".", [ "nando-automation-demo-docker", { "Ref" : "NandoDemoZoneName" } ] ] },
                                        "Type" : "CNAME",
					"TTL" : "900",
					"ResourceRecords" : [ { "Fn::GetAtt" : [ "NandoDemoDockerEnvironment", "EndpointURL" ] } ]
                                } ]
                        }
		},
                "NandoDemoBucketDNS" : {
                        "Type" : "AWS::Route53::RecordSetGroup",
                        "DependsOn" : "NandoDemoBucket",
                        "Properties" : {
                                "HostedZoneName" : { "Ref" : "NandoDemoZoneName" },
                                "RecordSets" : [ {
                                        "Name" : { "Fn::Join" : [ ".", [ "nando-automation-demo-bucket", { "Ref" : "NandoDemoZoneName" } ] ] },
                                        "Type" : "CNAME",
					"TTL" : "900",
					"ResourceRecords" : [ { "Fn::Join" : [ "", [ { "Ref" : "NandoDemoBucket" }, ".s3-website-us-east-1.amazonaws.com" ] ] } ]
                                } ]
                        }
		},
		"NandoDemoJenkins" : {
 			"Type" : "AWS::EC2::Instance",
			"DependsOn" : "NandoDemoPublicRouteTableAssociation",
 			"Properties" : {
        			"KeyName" : { "Ref" : "KeyName" },
 				"InstanceType" : { "Ref" : "InstanceType" },
 				"ImageId" : "ami-fb8e9292",
				"AvailabilityZone" : { "Fn::FindInMap" : [ "AvailabilityZone", "Public", "AZ" ] },
            			"IamInstanceProfile": { "Ref": "NandoDemoJenkinsInstanceProfile" },
        			"NetworkInterfaces" : [ { 
          				"NetworkInterfaceId" : {"Ref" : "NandoDemoJenkinsEth0" },
          				"DeviceIndex" : "0"
        			} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          				"#!/bin/bash\n",
          				"yum update -y aws-cfn-bootstrap\n",
             				"/opt/aws/bin/cfn-init -v ",
             				"         --stack ", { "Ref" : "AWS::StackName" },
             				"         --resource NandoDemoJenkins ",
             				"         --region ", { "Ref" : "AWS::Region" }, "\n",
             				"/opt/aws/bin/cfn-signal -e $? ",
             				"         --stack ", { "Ref" : "AWS::StackName" },
             				"         --resource NandoDemoJenkins ",
             				"         --region ", { "Ref" : "AWS::Region" }, "\n"
        			] ] } }
 			},
                        "Metadata" : {                          
                                "Comment" : "Nando Demo Jenkins",    
				"AWS::CloudFormation::Authentication": {
					"S3AccessCreds" : {
						"type" : "S3",
						"roleName" : { "Ref" : "NandoDemoJenkinsRole" },
						"buckets" : [ "nando-automation-demo" ]
					}
				},
                                "AWS::CloudFormation::Init" : { 
                                        "config" : {            
                                                "files" : {             
                                                        "/etc/cfn/cfn-hup.conf" : {
                                                                "content" : { "Fn::Join" : [ "", [
                                                                        "[main]\n",
                                                                        "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                                                        "region=", { "Ref" : "AWS::Region" }, "\n"
                                                                ] ] },    
                                                                "mode" : "000400",
                                                                "owner" : "root",
                                                                "group" : "root"
                                                        },      
                                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                                                                "content" : { "Fn::Join" : [ "", [
                                                                        "[cfn-auto-reloader-hook]\n",
                                                                        "triggers=post.update\n",
                                                                        "path=Resources.NandoDemoJenkins.Metadata.AWS::CloudFormation::Init\n",
                                                                        "action=/opt/aws/bin/cfn-init -v ",
                                                                        "         --stack ", { "Ref" : "AWS::StackName" },
                                                                        "         --resource NandoDemoJenkins ",
                                                                        "         --region ", { "Ref" : "AWS::Region" }, "\n",
                                                                        "runas=root\n"
                                                                ] ] }
                                                        },
							"/etc/puppet/installJenkins.pp" : {
								"source" : "http://nando-automation-demo.s3.amazonaws.com/installJenkins.pp",
                           					"mode" : "000400",
                                                                "owner" : "root",
                                                                "group" : "root",
								"authentication" : "S3AccessCreds"
							},
							"/etc/puppet/installJenkinsJob.pp" : {
								"source" : "http://nando-automation-demo.s3.amazonaws.com/installJenkinsJob.pp",
                           					"mode" : "000400",
                                                                "owner" : "root",
                                                                "group" : "root",
								"authentication" : "S3AccessCreds"
							},
                                                        "/etc/puppet/installJenkinsModules.pp" : {
                                                                "source" : "http://nando-automation-demo.s3.amazonaws.com/installJenkinsModules.pp",
                                                                "mode" : "000400",
                                                                "owner" : "root",
                                                                "group" : "root",
								"authentication" : "S3AccessCreds"
                                                        },
                                                       "/etc/puppet/installJenkinsUsers.pp" : {
                                                                "source" : "http://nando-automation-demo.s3.amazonaws.com/installJenkinsUsers.pp",
                                                                "mode" : "000400",
                                                                "owner" : "root",
                                                                "group" : "root",
                                                                "authentication" : "S3AccessCreds"
                                                        },
                                                       "/etc/puppet/installJenkinsSecurity.pp" : {
                                                                "source" : "http://nando-automation-demo.s3.amazonaws.com/installJenkinsSecurity.pp",
                                                                "mode" : "000400",
                                                                "owner" : "root",
                                                                "group" : "root",
                                                                "authentication" : "S3AccessCreds"
                                                        },
							"/etc/puppet/jobGetInstagramImages.xml.erb" : {
								"source" : "http://nando-automation-demo.s3.amazonaws.com/jobGetInstagramImages.xml.erb",
                           					"mode" : "000400",
                                                                "owner" : "root",
                                                                "group" : "root",
								"authentication" : "S3AccessCreds"
							},
							"/etc/puppet/jobPublishCodeDeploy.xml.erb" : {
								"source" : "http://nando-automation-demo.s3.amazonaws.com/jobPublishCodeDeploy.xml.erb",
                           					"mode" : "000400",
                                                                "owner" : "root",
                                                                "group" : "root",
								"authentication" : "S3AccessCreds"
							},
							"/var/lib/jenkins/nando-demo.pem" : {
								"content" : { "Ref" : "PrivateKey" },
								"mode" : "000400",
                                                                "owner" : "root",
                                                                "group" : "root",
								"authentication" : "S3AccessCreds"
							},
							"/var/lib/jenkins/cloudformation-stack-name" : {
								"content" : { "Ref" : "AWS::StackName" },
								"mode" : "000400",
                                                                "owner" : "root",
                                                                "group" : "root",
								"authentication" : "S3AccessCreds"
							}
                                                },
						"commands" : {
							"bootstrapA" : { "command" : "yum -y install git" },
							"bootstrapB" : { "command" : "yum -y install puppet python-pip python-devel" },
							"bootstrapC" : { "command" : "mkdir -pv /etc/puppet/modules /var/lib/jenkins" },
							"bootstrapD" : { "command" : "puppet module install rtyler/jenkins" },
							"bootstrapE" : { "command" : "sed -i s/RedHat/Linux/g /etc/puppet/modules/java/manifests/params.pp" },
							"bootstrapF" : { "command" : "pip install --upgrade awscli awsebcli python-instagram" },
							"installjenkinsA" : { "command" : "puppet apply /etc/puppet/installJenkins.pp" },
 							"installjenkinsB" : { "command" : "sleep 30" },
							"installjenkinsC" : { "command" : "puppet apply /etc/puppet/installJenkinsModules.pp" },
 							"installjenkinsD" : { "command" : "sleep 15" },
							"installjenkinsE" : { "command" : "puppet apply /etc/puppet/installJenkinsJob.pp" },
							"installjenkinsF" : { "command" : "/bin/sed -i 's|java|/usr/bin/java|g' /etc/puppet/modules/jenkins/manifests/cli.pp" },
                                                        "installjenkinsG" : { "command" : "puppet apply /etc/puppet/installJenkinsUsers.pp" },
							"installjenkinsH" : { "command" : "puppet apply /etc/puppet/installJenkinsSecurity.pp" }
						},
                                                "services" : {
                                                        "sysvinit" : {
								"jenkins" : { "enabled" : "true", "ensureRunning" : "true" },	
                                                                "cfn-hup" : { 
									"enabled" : "true", "ensureRunning" : "true",
                                                                	"files" : [ 	
										"/etc/cfn/cfn-hup.conf", 
										"/etc/cfn/hooks.d/cfn-auto-reloader.conf" 
									] 
								}
                                               		}
                                                }
                                        }
                                }
      			},
      			"CreationPolicy" : {
        			"ResourceSignal" : {
          				"Timeout" : "PT10M"
        			}
      			}
 		},
		"NandoDemoWebASG" : {
      			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn" : [ "NandoDemoWebLaunchConfig", "NandoDemoMysql" ],
      			"Version": "2009-05-15",
      			"Properties": {
				"AvailabilityZones" : [ { "Fn::FindInMap" : [ "AvailabilityZone", "Public", "AZ" ] } ],
        			"LaunchConfigurationName" : { "Ref": "NandoDemoWebLaunchConfig" },
				"LoadBalancerNames" : [ {"Ref" : "NandoDemoELB" } ],
				"VPCZoneIdentifier" : [ { "Ref" : "NandoDemoPublicSubnet" } ],
        			"MinSize": "2",
        			"MaxSize": "2",
        			"Tags" : [ {
          				"Key"   : "Name",
          				"Value" : { "Fn::Join"  : [ "-" , [ { "Ref" : "AWS::StackName" }, "webserver" ] ] },
          				"PropagateAtLaunch" : "true"
        			} ]
			}
      		},
		"NandoDemoWebLaunchConfig" : {
   			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"DependsOn" : "NandoDemoPublicRouteTableAssociation",
      			"Metadata" : {
        			"Comment" : "NandoDemoWebLaunchConfig",
        			"AWS::CloudFormation::Init" : {
          				"config" : {
            					"files" : {
							"/etc/cfn/NandoDemoDBHost" : {
								"content" : { "Fn::GetAtt" : [ "NandoDemoMysql", "Endpoint.Address" ] },
								"mode" : "000644",
                                                                "owner" : "root",
                                                                "group" : "root"
                                                        },
							"/etc/cfn/NandoDemoDBName" : {
								"content" : { "Ref" : "NandoDemoDBName" }, 
								"mode" : "000644",
								"owner" : "root",
								"group" : "root"
							},
							"/etc/cfn/NandoDemoDBUser" : {
								"content" : { "Ref" : "NandoDemoDBUser" },
								"mode" : "000644",
								"owner" : "root",
								"group" : "root"
							},
							"/etc/cfn/NandoDemoDBPass" : {
								"content" : { "Ref" : "NandoDemoDBPass" },
								"mode" : "000644",
								"owner" : "root",
								"group" : "root"
							},
              						"/etc/cfn/cfn-hup.conf" : {
                						"content" : { "Fn::Join" : [ "", [
                  							"[main]\n",
                  							"stack=", { "Ref" : "AWS::StackId" }, "\n",
                  							"region=", { "Ref" : "AWS::Region" }, "\n"
                						] ] },
                						"mode" : "000400",
                						"owner" : "root",
                						"group" : "root"
              						},
              						"/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                						"content" : { "Fn::Join" : [ "", [
                  							"[cfn-auto-reloader-hook]\n",
                  							"triggers=post.update\n",
                  							"path=Resources.NandoDemoWebASG.Metadata.AWS::CloudFormation::Init\n",
                  							"action=/opt/aws/bin/cfn-init -v ",
                  							"         --stack ", { "Ref" : "AWS::StackName" },
                  							"         --resource NandoDemoWebLaunchConfig ",
                  							"         --region ", { "Ref" : "AWS::Region" }, "\n",
                  							"runas=root\n"
                						] ] }
              						}
            					},
            					"services" : {
              						"sysvinit" : {
                						"cfn-hup" : { 
									"enabled" : "true", "ensureRunning" : "true",
                              						"files" : [ 
										"/etc/cfn/cfn-hup.conf", 
										"/etc/cfn/hooks.d/cfn-auto-reloader.conf" 
									] 
								}
              						}
            					}
          				}
        			}
      			},
      			"Properties" : {
        			"KeyName" : { "Ref" : "KeyName" },
        			"InstanceType" : { "Ref" : "InstanceType" },
 				"ImageId" : "ami-fb8e9292",
				"AssociatePublicIpAddress" : "true",
            			"IamInstanceProfile": { "Ref": "NandoDemoASGInstanceProfile" },
				"SecurityGroups": [ { "Ref": "NandoDemoPublicSecurityGroup" } ],
        			"UserData"       : { "Fn::Base64" : { "Fn::Join" : [ "", [
             				"#!/bin/bash -xe\n",
             				"yum update -y aws-cfn-bootstrap aws-cli\n",
					"aws s3 cp s3://aws-codedeploy-us-east-1/latest/install . --region us-east-1\n",
					"chmod +x ./install\n",
					"./install auto\n",
             				"/opt/aws/bin/cfn-init -v ",
             				"         --stack ", { "Ref" : "AWS::StackName" },
             				"         --resource NandoDemoWebLaunchConfig ",
             				"         --region ", { "Ref" : "AWS::Region" }, "\n",
             				"/opt/aws/bin/cfn-signal -e $? ",
             				"         --stack ", { "Ref" : "AWS::StackName" },
             				"         --resource NandoDemoWebLaunchConfig ",
             				"         --region ", { "Ref" : "AWS::Region" }, "\n"
        				] ] }
				}
      			},
      			"CreationPolicy" : {
        			"ResourceSignal" : {
          				"Timeout" : "PT5M"
        			}
      			}
    		},
		"NandoDemoMysql" : {
    			"Type" : "AWS::RDS::DBInstance",
			"DependsOn" : [ "NandoDemoMysqlSubnetGroup" ],
    			"Properties": {
      				"DBName" : { "Ref" : "NandoDemoDBName" },
      				"MasterUsername" : { "Ref" : "NandoDemoDBUser" },
				"MasterUserPassword": { "Ref" : "NandoDemoDBPass" }, 
      				"Engine" : "MySQL",
      				"DBInstanceClass" : "db.t2.micro",
				"MultiAZ" : "true",
      				"AllocatedStorage" : "5", 
				"VPCSecurityGroups" : [ { "Fn::GetAtt": [ "NandoDemoPrivateSecurityGroup", "GroupId" ] } ],
				"DBSubnetGroupName" : { "Ref" : "NandoDemoMysqlSubnetGroup" }
    			}
  		},		
		"NandoDemoMysqlSubnetGroup" : {
   			"Type" : "AWS::RDS::DBSubnetGroup",
   			"Properties" : { 
				"SubnetIds" : [ 
					{ "Ref" : "NandoDemoPrivateSubnet1" }, 
					{ "Ref" : "NandoDemoPrivateSubnet2" } 
				], 
				"DBSubnetGroupDescription" : "NandoDemoMysqlSubnetGroup"
			}
		}, 
    		"NandoDemoPublicSecurityGroup" : {
      			"Type" : "AWS::EC2::SecurityGroup",
      			"Properties" : {
        			"GroupDescription" : "nando-demo-public",
        			"VpcId" : { "Ref" : "NandoDemoVPC" },
        			"SecurityGroupIngress" : [ 
        				{ "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" },
					{ "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "10.200.0.0/16" },
					{ "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "Location1" } },
					{ "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "Location2" } },
					{ "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "Location3" } },
					{ "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "Location4" } },
					{ "IpProtocol" : "tcp", "FromPort" : "2222", "ToPort" : "2222", "CidrIp" : { "Ref" : "Location1" } },
					{ "IpProtocol" : "tcp", "FromPort" : "2222", "ToPort" : "2222", "CidrIp" : { "Ref" : "Location2" } },
					{ "IpProtocol" : "tcp", "FromPort" : "2222", "ToPort" : "2222", "CidrIp" : { "Ref" : "Location3" } },
					{ "IpProtocol" : "tcp", "FromPort" : "2222", "ToPort" : "2222", "CidrIp" : { "Ref" : "Location4" } },
					{ "IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "CidrIp" : { "Ref" : "Location1" } },
					{ "IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "CidrIp" : { "Ref" : "Location2" } },
					{ "IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "CidrIp" : { "Ref" : "Location3" } },
					{ "IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "CidrIp" : { "Ref" : "Location4" } }
				]
      			}
    		},
		"NandoDemoPrivateSecurityGroup" : {
                        "Type" : "AWS::EC2::SecurityGroup",
                        "Properties" : {
                                "GroupDescription" : "nando-demo-private",
                                "VpcId" : { "Ref" : "NandoDemoVPC" }
			}
		},
 		"NandoDemoPrivateSecurityGroupSSH" : {
      			"Type" : "AWS::EC2::SecurityGroupIngress",
      			"Properties" : {
        				"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "SourceSecurityGroupId" : 
          					{ "Fn::GetAtt": [ "NandoDemoPublicSecurityGroup", "GroupId" ] },
        				"GroupId": { "Fn::GetAtt": [ "NandoDemoPrivateSecurityGroup", "GroupId" ] }
			}
		},
 		"NandoDemoPrivateSecurityGroupMysql" : {
      			"Type" : "AWS::EC2::SecurityGroupIngress",
      			"Properties" : {
                                        "IpProtocol" : "tcp", "FromPort" : "3306", "ToPort" : "3306", "SourceSecurityGroupId" : 
          					{ "Fn::GetAtt": [ "NandoDemoPublicSecurityGroup", "GroupId" ] },
                                        "GroupId": { "Fn::GetAtt": [ "NandoDemoPrivateSecurityGroup", "GroupId" ] }
                        }
                },
	      	"NandoDemoJenkinsRole": {
         		"Type" : "AWS::IAM::Role",
         		"Properties": {
            			"AssumeRolePolicyDocument": {
               				"Version" : "2012-10-17",
               				"Statement": [ {
                  				"Effect": "Allow",
                  				"Principal": { "Service": [ "ec2.amazonaws.com" ] },
                  				"Action": [ "sts:AssumeRole" ]
               				} ]
            			},
            			"Path": "/"
         		}
      		},
	      	"NandoDemoASGRole": {
         		"Type" : "AWS::IAM::Role",
         		"Properties": {
            			"AssumeRolePolicyDocument": {
               				"Version" : "2012-10-17",
               				"Statement": [ {
                  				"Effect": "Allow",
                  				"Principal": { "Service": [ "ec2.amazonaws.com" ] },
                  				"Action": [ "sts:AssumeRole" ]
               				} ]
            			},
            			"Path": "/"
         		}
      		},
      		"NandoDemoJenkinsIAMPolicy": {
     			"Type" : "AWS::IAM::Policy",
			"DependsOn" : "NandoDemoJenkinsRole",
         		"Properties": {
            			"PolicyName": "nando-demo-jenkins-policy",
            			"PolicyDocument": {
               				"Version" : "2012-10-17",
					"Statement": [ {
      						"Action": [
        						"autoscaling:Describe*",
        						"cloudformation:DescribeStacks",
        						"ec2:Describe*",
        						"s3:*",
							"codedeploy:CreateDeployment"
      						],
      						"Effect": "Allow",
      						"Resource": "*"
    					} ]
            			},
            			"Roles": [ { "Ref": "NandoDemoJenkinsRole" } ]
         		}
      		},
                "NandoDemoASGIAMPolicy": {
                        "Type" : "AWS::IAM::Policy",
                        "DependsOn" : "NandoDemoASGRole",
                        "Properties" : {
                                "PolicyName" : "nando-demo-asg-policy",
                                "PolicyDocument" : {
                                        "Version" : "2012-10-17",
                                        "Statement" : [ {
                                                "Action" : [ "s3:Get*", "s3:List*" ],
                                                "Effect" : "Allow",
                                                "Resource" : [ 
							"arn:aws:s3:::nando-automation-demo/*",
							"arn:aws:s3:::aws-codedeploy-us-east-1/*"
						 ]	
                                        } ]
                                },
                                "Roles": [ { "Ref": "NandoDemoASGRole" } ]
                        }
                },

      		"NandoDemoJenkinsInstanceProfile": {
         		"Type" : "AWS::IAM::InstanceProfile",
			"DependsOn" : "NandoDemoJenkinsRole",
         		"Properties": {
            			"Path": "/",
            			"Roles": [ { "Ref": "NandoDemoJenkinsRole" } ]
         		}
      		},
      		"NandoDemoASGInstanceProfile": {
         		"Type" : "AWS::IAM::InstanceProfile",
			"DependsOn" : "NandoDemoASGRole",
         		"Properties": {
            			"Path": "/",
            			"Roles": [ { "Ref": "NandoDemoASGRole" } ]
         		}
      		},
		"NandoDemoBucketPolicy" : {
   			"Type" : "AWS::S3::BucketPolicy",
			"DependsOn" : "NandoDemoBucket",
   			"Properties" : {
      				"PolicyDocument" : {
         				"Id" : "NandoDemoBucketPolicy",
         				"Version": "2012-10-17",
         				"Statement" : [ {
            					"Sid" : "allowTrustedIPs",
            					"Action" : [ "s3:*" ],
            					"Effect" : "Allow",
            					"Resource" : { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "NandoDemoBucket" } , "/*" ] ] },
            					"Principal" : "*",
						"Condition" :  { "IpAddress" : { "aws:SourceIp" : [ 
							{ "Ref" : "Location1" }, 
							{ "Ref" : "Location2" }, 
							{ "Ref" : "Location3" },
							{ "Ref" : "Location4" } 
						] } }
         				} ]
      				},
      				"Bucket" : { "Ref" : "NandoDemoBucket" }
      			}
   		},
		"NandoDemoBucket" : {
 			"Type" : "AWS::S3::Bucket",
			"Properties" : { 
				"WebsiteConfiguration" : { 
					"IndexDocument" : "index.html" 
				}
             		}
    		},
		"NandoDemoDockerApp" : { 
			"Type" : "AWS::ElasticBeanstalk::Application", 
		   	"Properties" : { 
				"ApplicationName" : "NandoDemoDockerApp", 
				"Description" : "NandoDemoDockerApp"
			}
		},
                "NandoDemoDockerVersion": {
                        "Type" : "AWS::ElasticBeanstalk::ApplicationVersion",
                        "Properties" : {
                                "ApplicationName" : { "Ref": "NandoDemoDockerApp" },
				"Description" : "NandoDemoDockerVersion",
                                "SourceBundle" : {
                                        "S3Bucket" : "nando-automation-demo",
                                        "S3Key" : "nando-demo.zip"
                                }
                        }
                },
                "NandoDemoDockerTemplate": {
                        "Type" : "AWS::ElasticBeanstalk::ConfigurationTemplate",
                        "Properties" : {
                                "ApplicationName" : { "Ref": "NandoDemoDockerApp" },
				"Description" : "NandoDemoDockerTemplate",
                                "OptionSettings" : [
                                        { "Namespace" : "aws:autoscaling:asg", "OptionName" : "MinSize", "Value" : "1" },
                                        { "Namespace" : "aws:autoscaling:asg", "OptionName" : "MaxSize", "Value" : "2" },
                                        { "Namespace" : "aws:elasticbeanstalk:environment", "OptionName" : "EnvironmentType", "Value" : "LoadBalanced" },
					{ "Namespace" : "aws:autoscaling:launchconfiguration", "OptionName" : "EC2KeyName", "Value" : { "Ref" : "KeyName" } }
                                ],
      				"SolutionStackName" : "64bit Amazon Linux 2014.09 v1.2.1 running Docker 1.5.0"
                        }
                },
                "NandoDemoDockerEnvironment" : {
                        "Type" : "AWS::ElasticBeanstalk::Environment",
                        "Properties" : {
                                "ApplicationName" : { "Ref" : "NandoDemoDockerApp" },
				"Description" : "NandoDemoDockerEnvironment",
                                "TemplateName" : { "Ref" : "NandoDemoDockerTemplate" },
                                "VersionLabel" : { "Ref" : "NandoDemoDockerVersion" }
                        }
                }

	},
  	"Outputs" : {
		"NandoDemoName" : { "Value" : { "Ref" : "NandoDemoName" } },
		"NandoDemoBucket" : { "Value" : { "Ref" : "NandoDemoBucket" } },
		"NandoDemoWebASG" : { "Value" : { "Ref" : "NandoDemoWebASG" } },
    		"NandoDemoJenkinsEIP" : { "Value" : { "Ref" : "NandoDemoJenkinsEIP" } },
		"NandoDemoDBName" : { "Value" : { "Ref" : "NandoDemoDBName" } },
		"NandoDemoDBUser" : { "Value" : { "Ref" : "NandoDemoDBUser" } },
		"NandoDemoDBPass" : { "Value" : { "Ref" : "NandoDemoDBPass" } },
		"NandoDemoDBHost" : { "Value" : { "Fn::GetAtt" : [ "NandoDemoMysql", "Endpoint.Address" ] } },
    		"NandoDemoJenkinsURL" : { "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "NandoDemoJenkins", "PublicDnsName" ] }, ":8080" ] ] } },
      		"NandoDemoELBDNSNAME" : { "Value" : { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "NandoDemoELB", "DNSName" ] } ] ] } },
   		"NandoDemoBucketURL" : { "Value" : { "Fn::Join" : [ "", [ "http://", { "Ref" : "NandoDemoBucket" }, ".s3-website-us-east-1.amazonaws.com" ] ] } },
		"NandoDemoDockerURL" : { "Value" : { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "NandoDemoDockerEnvironment", "EndpointURL" ] } ] ] } },
		"NandoDemoCNAME" : { "Value" : { "Fn::Join" : [ "", [ "http://nando-automation-demo.", { "Ref" : "NandoDemoZoneName" } ] ] } },
		"NandoDemoDockerCNAME" : { "Value" : { "Fn::Join" : [ "", [ "http://nando-automation-demo-docker.", { "Ref" : "NandoDemoZoneName" } ] ] } },
		"NandoDemoBucketCNAME" : { "Value" : { "Fn::Join" : [ "", [ "http://nando-automation-demo-bucket.", { "Ref" : "NandoDemoZoneName" } ] ] } },
		"NandoDemoJenkinsCNAME" : { "Value" : { "Fn::Join" : [ "", [ "http://nando-automation-demo-jenkins.", { "Ref" : "NandoDemoZoneName" }, ":8080" ] ] } }
  	}
}
