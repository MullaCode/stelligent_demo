{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Stelligent Demo",
  "Parameters": {
    "StelligentDemoBucket": {
      "Type": "String"
    },
    "StelligentDemoBucketURL": {
      "Type": "String"
    },
    "StelligentDemoBucketDomainName": {
      "Type": "String"
    },
    "StelligentDemoBucketCNAME": {
      "Type": "String"
    },
    "StelligentDemoVPC": {
      "Type": "String"
    },
    "StelligentDemoPublicSubnet": {
      "Type": "String"
    },
    "StelligentDemoPrivateSubnet1": {
      "Type": "String"
    },
    "StelligentDemoPrivateSubnet2": {
      "Type": "String"
    },
    "StelligentDemoPublicSecurityGroup": {
      "Type": "String"
    },
    "StelligentDemoPrivateSecurityGroup": {
      "Type": "String"
    },
    "StelligentDemoPrivateSecurityGroupSSH": {
      "Type": "String"
    },
    "StelligentDemoPrivateSecurityGroupMySQL": {
      "Type": "String"
    },
    "StelligentDemoDBHost": {
      "Type": "String"
    },
    "StelligentDemoDBName": {
      "Type": "String"
    },
    "StelligentDemoDBUser": {
      "Type": "String"
    },
    "StelligentDemoDBPass": {
      "Type": "String"
    },
    "PrimaryPermanentS3Bucket": {
      "Type": "String"
    },
    "InstanceTypeASG": {
      "Type": "String",
      "Default": "m1.small"
    },
    "InstanceTypeJenkins": {
      "Type": "String",
      "Default": "m1.medium"
    },
    "DemoRegion": {
      "Type": "String",
      "Default": "us-east-1"
    },
    "HashID": {
      "Type": "String"
    },
    "NandoDemoJenkinsConfigSet": {
      "Type": "String",
      "Default": "default"
    },
    "StelligentDemoZoneName": {
      "Type": "String"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "NandoDemoName": {
      "Type": "String"
    },
    "PrivateKey": {
      "Type": "String"
    },
    "InstagramId": {
      "Type": "String"
    },
    "InstagramSecret": {
      "Type": "String"
    },
    "CodeDeployAppName": {
      "Type": "String"
    },
    "CodeDeployDeploymentGroup": {
      "Type": "String"
    },
    "StelligentEcsInstanceAsgName": {
      "Type": "String"
    },
    "StelligentEcsElbName": {
      "Type": "String"
    }
  },
  "Mappings": {
    "InstanceAMIs": {
      "us-east-1": {
        "AMI": "ami-1ccae774"
      },
      "us-west-2": {
        "AMI": "ami-ff527ecf"
      }
    },
    "AvailabilityZone": {
      "us-east-1": {
        "Public": "us-east-1c",
        "Private1": "us-east-1d",
        "Private2": "us-east-1e"
      },
      "us-west-2": {
        "Public": "us-west-2a",
        "Private1": "us-west-2b",
        "Private2": "us-west-2c"
      }
    }
  },
  "Resources": {
    "NandoDemoJenkinsEth0": {
      "Type": "AWS::EC2::NetworkInterface",
      "DependsOn": "StelligentDemoPublicLockedSecurityGroup",
      "Properties": {
        "Description": "eth0jenkins",
        "SubnetId": {
          "Ref": "StelligentDemoPublicSubnet"
        },
        "GroupSet": [{
          "Ref": "StelligentDemoPublicLockedSecurityGroup"
        }, {
          "Ref": "StelligentDemoPublicSecurityGroup"
        }]
      }
    },
    "NandoDemoJenkinsEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NandoDemoJenkinsAssocEIP": {
      "Type": "AWS::EC2::EIPAssociation",
      "DependsOn": "NandoDemoJenkinsEIP",
      "Properties": {
        "NetworkInterfaceId": {
          "Ref": "NandoDemoJenkinsEth0"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "NandoDemoJenkinsEIP",
            "AllocationId"
          ]
        }
      }
    },
    "NandoDemoELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [{
          "Ref": "StelligentDemoPublicSubnet"
        }],
        "Listeners": [{
          "LoadBalancerPort": "80",
          "InstancePort": "80",
          "Protocol": "HTTP"
        }, {
          "LoadBalancerPort": "2222",
          "InstancePort": "22",
          "Protocol": "TCP"
        }],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "5",
          "Interval": "5",
          "Timeout": "4"
        },
        "SecurityGroups": [{
          "Ref": "StelligentDemoPublicSecurityGroup"
        }]
      }
    },
    "NandoDemoELBDNS": {
      "Type": "AWS::Route53::RecordSetGroup",
      "DependsOn": "NandoDemoELB",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [{
                "Ref": "StelligentDemoZoneName"
              },
              "."
            ]
          ]
        },
        "RecordSets": [{
          "Name": {
            "Fn::Join": [
              ".", [{
                "Fn::Join": [
                  "-", [
                    "nando-automation-demo", {
                      "Ref": "DemoRegion"
                    }, {
                      "Ref": "HashID"
                    }
                  ]
                ]
              }, {
                "Fn::Join": [
                  "", [{
                      "Ref": "StelligentDemoZoneName"
                    },
                    "."
                  ]
                ]
              }]
            ]
          },
          "Type": "A",
          "AliasTarget": {
            "HostedZoneId": {
              "Fn::GetAtt": [
                "NandoDemoELB",
                "CanonicalHostedZoneNameID"
              ]
            },
            "DNSName": {
              "Fn::GetAtt": [
                "NandoDemoELB",
                "CanonicalHostedZoneName"
              ]
            }
          }
        }]
      }
    },
    "NandoDemoJenkinsDNS": {
      "Type": "AWS::Route53::RecordSetGroup",
      "DependsOn": "NandoDemoJenkinsEIP",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [{
                "Ref": "StelligentDemoZoneName"
              },
              "."
            ]
          ]
        },
        "RecordSets": [{
          "Name": {
            "Fn::Join": [
              ".", [{
                "Fn::Join": [
                  "-", [
                    "nando-automation-demo-jenkins", {
                      "Ref": "DemoRegion"
                    }, {
                      "Ref": "HashID"
                    }
                  ]
                ]
              }, {
                "Fn::Join": [
                  "", [{
                      "Ref": "StelligentDemoZoneName"
                    },
                    "."
                  ]
                ]
              }]
            ]
          },
          "Type": "A",
          "TTL": "900",
          "ResourceRecords": [{
            "Ref": "NandoDemoJenkinsEIP"
          }]
        }]
      }
    },
    "NandoDemoJenkins": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "NandoDemoWebASG",
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceType": {
          "Ref": "InstanceTypeJenkins"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "InstanceAMIs", {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "AvailabilityZone": {
          "Fn::FindInMap": [
            "AvailabilityZone", {
              "Ref": "AWS::Region"
            },
            "Public"
          ]
        },
        "IamInstanceProfile": {
          "Ref": "NandoDemoJenkinsInstanceProfile"
        },
        "NetworkInterfaces": [{
          "NetworkInterfaceId": {
            "Ref": "NandoDemoJenkinsEth0"
          },
          "DeviceIndex": "0"
        }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", [
                "#!/bin/bash\n",
                "yum update -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         -c ", {
                  "Ref": "NandoDemoJenkinsConfigSet"
                },
                "         --stack ", {
                  "Ref": "AWS::StackName"
                },
                "         --resource NandoDemoJenkins ",
                "         --region ", {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ", {
                  "Ref": "AWS::StackName"
                },
                "         --resource NandoDemoJenkins ",
                "         --region ", {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT10M"
        }
      },
      "Metadata": {
        "Comment": "Nando Demo Jenkins",
        "AWS::CloudFormation::Authentication": {
          "S3AccessCreds": {
            "type": "S3",
            "roleName": {
              "Ref": "NandoDemoJenkinsRole"
            },
            "buckets": [
              "nando-automation-demo"
            ]
          }
        },
        "AWS::CloudFormation::Init": {
          "configSets": {
            "quick": [
              "cfg-db",
              "cfg-files",
              "cfg-jenkins-commands",
              "cfg-services"
            ],
            "full": [
              "cfg-packages",
              "cfg-db",
              "cfg-files",
              "cfg-sys-commands",
              "cfg-jenkins-commands",
              "cfg-services"
            ],
            "default": [{
              "ConfigSet": "full"
            }]
          },
          "cfg-packages": {
            "packages": {
              "rpm": {
                "jenkins": "http://pkg.jenkins-ci.org/redhat/jenkins-1.596-1.1.noarch.rpm"
              }
            }
          },
          "cfg-db": {
            "packages": {
              "yum": {
                "mysql": []
              }
            },
            "files": {
              "/root/createDB.sh": {
                "content": {
                  "Fn::Join": [
                    "", [
                      "#!/bin/bash\n",
                      "mysql",
                      " -h ", {
                        "Ref": "StelligentDemoDBHost"
                      },
                      " -u ", {
                        "Ref": "StelligentDemoDBUser"
                      },
                      " -p", {
                        "Ref": "StelligentDemoDBPass"
                      },
                      " < /root/createDB.mysql\n"
                    ]
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/root/createDB.mysql": {
                "content": {
                  "Fn::Join": [
                    "", [
                      "CREATE DATABASE ", {
                        "Ref": "StelligentDemoDBName"
                      },
                      ";\n",
                      "GRANT ALL ON ", {
                        "Ref": "StelligentDemoDBName"
                      },
                      ".* TO '", {
                        "Ref": "StelligentDemoDBUser"
                      },
                      "'@'localhost';\n",
                      "FLUSH PRIVILEGES;\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "createDatabase": {
                "command": "/bin/bash /root/createDB.sh"
              }
            }
          },
          "cfg-files": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "", [
                      "[main]\n",
                      "stack=", {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=", {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "", [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.NandoDemoJenkins.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v",
                      "         --stack ", {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource NandoDemoJenkins ",
                      "         --region ", {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              },
              "/etc/puppet/manifests/installJenkins.pp": {
                "source": "http://nando-automation-demo.s3.amazonaws.com/installJenkins.pp",
                "mode": "000400",
                "owner": "root",
                "group": "root",
                "authentication": "S3AccessCreds"
              },
              "/etc/puppet/manifests/installJenkinsJob.pp": {
                "source": "http://nando-automation-demo.s3.amazonaws.com/installJenkinsJob.pp",
                "mode": "000400",
                "owner": "root",
                "group": "root",
                "authentication": "S3AccessCreds"
              },
              "/etc/puppet/manifests/installJenkinsPlugins.pp": {
                "source": "http://nando-automation-demo.s3.amazonaws.com/installJenkinsPlugins.pp",
                "mode": "000400",
                "owner": "root",
                "group": "root",
                "authentication": "S3AccessCreds"
              },
              "/etc/puppet/manifests/installJenkinsUsers.pp": {
                "source": "http://nando-automation-demo.s3.amazonaws.com/installJenkinsUsers.pp",
                "mode": "000400",
                "owner": "root",
                "group": "root",
                "authentication": "S3AccessCreds"
              },
              "/etc/puppet/manifests/installJenkinsSecurity.pp": {
                "source": "http://nando-automation-demo.s3.amazonaws.com/installJenkinsSecurity.pp",
                "mode": "000400",
                "owner": "root",
                "group": "root",
                "authentication": "S3AccessCreds"
              },
              "/etc/puppet/templates/seed.xml.erb": {
                "source": "http://nando-automation-demo.s3.amazonaws.com/seed.xml.erb",
                "mode": "000400",
                "owner": "root",
                "group": "root",
                "authentication": "S3AccessCreds"
              },
              "/var/lib/jenkins/cloudformation.stack.name": {
                "source": {
                  "Fn::Join": [
                    "-", [
                      "http://nando-automation-demo.s3.amazonaws.com/cloudformation.stack.name", {
                        "Ref": "DemoRegion"
                      }, {
                        "Ref": "HashID"
                      }
                    ]
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root",
                "authentication": "S3AccessCreds"
              },
              "/var/lib/jenkins/.instagram.client.id": {
                "content": {
                  "Ref": "InstagramId"
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/var/lib/jenkins/.instagram.client.secret": {
                "content": {
                  "Ref": "InstagramSecret"
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/var/lib/jenkins/nando-demo.pem": {
                "content": {
                  "Ref": "PrivateKey"
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/var/lib/jenkins/cloudformation-stack-name": {
                "content": {
                  "Ref": "AWS::StackName"
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              }
            }
          },
          "cfg-sys-commands": {
            "commands": {
              "bootstrapB": {
                "command": "mkdir -pv /etc/puppet/modules /var/lib/jenkins"
              },
              "bootstrapC": {
                "command": "yum -y install git puppet python-pip python-devel gcc zlib-devel openssl-devel"
              },
              "bootstrapD": {
                "command": "wget -nv https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz"
              },
              "bootstrapE": {
                "command": "tar fxz Python-2.7.9.tgz"
              },
              "bootstrapF": {
                "command": "cd Python-2.7.9 && ./configure --prefix=/usr/local && make && make altinstall"
              },
              "bootstrapG": {
                "command": "wget -nv https://bootstrap.pypa.io/get-pip.py && python2.7 get-pip.py"
              },
              "bootstrapH": {
                "command": "/usr/local/bin/pip2.7 install --upgrade awscli awsebcli python-instagram"
              },
              "bootstrapI": {
                "command": "puppet module install rtyler/jenkins --version 1.3.0"
              },
              "bootstrapJ": {
                "command": "sed -i 's|RedHat|Linux|g' /etc/puppet/modules/java/manifests/params.pp"
              },
              "bootstrapK": {
                "command": "sed -i 's|java|/usr/bin/java|g' /etc/puppet/modules/jenkins/manifests/cli.pp"
              }
            }
          },
          "cfg-jenkins-commands": {
            "commands": {
              "installjenkins0": {
                "command": "service jenkins restart"
              },
              "installjenkins1": {
                "command": "while [[ $(curl -s -w \"%{http_code}\" http://localhost:8080 -o /dev/null) != \"200\" ]]; do sleep 1; done"
              },
              "installjenkinsA": {
                "command": "puppet apply /etc/puppet/manifests/installJenkinsPlugins.pp > /root/installJenkinsPlugins.out 2>&1"
              },
              "installjenkinsB": {
                "command": "puppet apply /etc/puppet/manifests/installJenkinsJob.pp > /root/installJenkinsJob.out 2>&1"
              },
              "installjenkinsC": {
                "command": "puppet apply /etc/puppet/manifests/installJenkinsUsers.pp > /root/installJenkinsUsers.out 2>&1"
              },
              "installjenkinsD": {
                "command": "puppet apply /etc/puppet/manifests/installJenkinsSecurity.pp > /root/installJenkinsSecurity.out 2>&1"
              }
            }
          },
          "cfg-services": {
            "services": {
              "sysvinit": {
                "jenkins": {
                  "enabled": "true",
                  "ensureRunning": "true"
                },
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "NandoDemoWebASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": [
        "NandoDemoWebLaunchConfig"
      ],
      "Version": "2009-05-15",
      "Properties": {
        "AvailabilityZones": [{
          "Fn::FindInMap": [
            "AvailabilityZone", {
              "Ref": "AWS::Region"
            },
            "Public"
          ]
        }],
        "LaunchConfigurationName": {
          "Ref": "NandoDemoWebLaunchConfig"
        },
        "LoadBalancerNames": [{
          "Ref": "NandoDemoELB"
        }],
        "VPCZoneIdentifier": [{
          "Ref": "StelligentDemoPublicSubnet"
        }],
        "MinSize": "2",
        "MaxSize": "2",
        "Tags": [{
          "Key": "Name",
          "Value": {
            "Fn::Join": [
              "-", [{
                  "Ref": "AWS::StackName"
                },
                "webserver"
              ]
            ]
          },
          "PropagateAtLaunch": "true"
        }]
      }
    },
    "NandoDemoWebLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment": "NandoDemoWebLaunchConfig",
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/etc/cfn/NandoDemoDBHost": {
                "content": {
                  "Ref": "StelligentDemoDBHost"
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/NandoDemoDBName": {
                "content": {
                  "Ref": "StelligentDemoDBName"
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/NandoDemoDBUser": {
                "content": {
                  "Ref": "StelligentDemoDBUser"
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/NandoDemoDBPass": {
                "content": {
                  "Ref": "StelligentDemoDBPass"
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "", [
                      "[main]\n",
                      "stack=", {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=", {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "", [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.NandoDemoWebASG.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ", {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource NandoDemoWebLaunchConfig ",
                      "         --region ", {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceType": {
          "Ref": "InstanceTypeASG"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "InstanceAMIs", {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "AssociatePublicIpAddress": "true",
        "IamInstanceProfile": {
          "Ref": "NandoDemoASGInstanceProfile"
        },
        "SecurityGroups": [{
          "Ref": "StelligentDemoPublicSecurityGroup"
        }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap aws-cli\n",
                "aws s3 cp s3://aws-codedeploy-us-east-1/latest/install . --region ", {
                  "Ref": "DemoRegion"
                },
                "\n",
                "chmod +x ./install\n",
                "./install auto\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ", {
                  "Ref": "AWS::StackName"
                },
                "         --resource NandoDemoWebLaunchConfig ",
                "         --region ", {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ", {
                  "Ref": "AWS::StackName"
                },
                "         --resource NandoDemoWebLaunchConfig ",
                "         --region ", {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT5M"
        }
      }
    },
    "StelligentDemoPublicLockedSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "stelligent-demo-public-locked",
        "VpcId": {
          "Ref": "StelligentDemoVPC"
        },
        "SecurityGroupIngress": []
      }
    },
    "NandoDemoJenkinsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "codedeploy.amazonaws.com",
                "ec2.amazonaws.com"
              ]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }]
        },
        "Path": "/"
      }
    },
    "NandoDemoASGRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "codedeploy.amazonaws.com",
                "ec2.amazonaws.com"
              ]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }]
        },
        "Path": "/"
      }
    },
    "NandoDemoJenkinsIAMPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "NandoDemoJenkinsRole",
      "Properties": {
        "PolicyName": "nando-demo-jenkins-policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Action": [
              "autoscaling:Describe*",
              "cloudformation:DescribeStacks",
              "ec2:Describe*",
              "codedeploy:Get*",
              "codedeploy:List*",
              "codedeploy:CreateDeployment",
              "codedeploy:RegisterApplicationRevision"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }, {
            "Action": [
              "s3:Get*",
              "s3:List*"
            ],
            "Effect": "Allow",
            "Resource": {
              "Fn::Join": [
                "", [
                  "arn:aws:s3:::", {
                    "Ref": "PrimaryPermanentS3Bucket"
                  },
                  "/*"
                ]
              ]
            }
          }, {
            "Action": [
              "s3:*"
            ],
            "Effect": "Allow",
            "Resource": {
              "Fn::Join": [
                "", [
                  "arn:aws:s3:::", {
                    "Ref": "StelligentDemoBucket"
                  },
                  "/*"
                ]
              ]
            }
          }]
        },
        "Roles": [{
          "Ref": "NandoDemoJenkinsRole"
        }]
      }
    },
    "NandoDemoASGIAM": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "NandoDemoASGRole",
      "Properties": {
        "PolicyName": "nando-demo-asg-policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Action": [
              "autoscaling:PutLifecycleHook",
              "autoscaling:DeleteLifecycleHook",
              "autoscaling:RecordLifecycleActionHeartbeat",
              "autoscaling:CompleteLifecycleAction",
              "autoscaling:DescribeAutoscalingGroups",
              "autoscaling:PutInstanceInStandby",
              "autoscaling:PutInstanceInService",
              "cloudformation:DescribeStacks",
              "codedeploy:*",
              "ec2:Describe*",
              "Tag:get*",
              "elasticbeanstalk:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }, {
            "Action": [
              "s3:Get*",
              "s3:List*"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:s3:::nando-automation-demo/*",
              "arn:aws:s3:::aws-codedeploy-us-east-1/*"
            ]
          }]
        },
        "Roles": [{
          "Ref": "NandoDemoASGRole"
        }]
      }
    },
    "NandoDemoJenkinsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "DependsOn": "NandoDemoJenkinsRole",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "NandoDemoJenkinsRole"
        }]
      }
    },
    "NandoDemoASGInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "DependsOn": "NandoDemoASGRole",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "NandoDemoASGRole"
        }]
      }
    }
  },
  "Outputs": {
    "StelligentEcsInstanceAsgName" : {
      "Description" : "Auto Scaling Group Name for ECS Instances",
      "Value" : { "Ref" : "StelligentEcsInstanceAsgName" }
    },
    "StelligentEcsElbName" : {
      "Description" : "Load Balancer for Stelligent Demo ECS",
      "Value" : { "Ref" : "StelligentEcsElbName" }
    },
    "StelligentDemoName": {
      "Value": {
        "Ref": "NandoDemoName"
      }
    },
    "StelligentDemoBucket": {
      "Value": {
        "Ref": "StelligentDemoBucket"
      }
    },
    "StelligentDemoWebASG": {
      "Value": {
        "Ref": "NandoDemoWebASG"
      }
    },
    "StelligentDemoJenkinsEIP": {
      "Value": {
        "Ref": "NandoDemoJenkinsEIP"
      }
    },
    "StelligentDemoDBName": {
      "Value": {
        "Ref": "StelligentDemoDBName"
      }
    },
    "StelligentDemoDBUser": {
      "Value": {
        "Ref": "StelligentDemoDBUser"
      }
    },
    "StelligentDemoDBPass": {
      "Value": {
        "Ref": "StelligentDemoDBPass"
      }
    },
    "StelligentDemoDBHost": {
      "Value": {
        "Ref": "StelligentDemoDBHost"
      }
    },
    "StelligentDemoJenkinsURL": {
      "Value": {
        "Fn::Join": [
          "", [
            "http://", {
              "Fn::GetAtt": [
                "NandoDemoJenkins",
                "PublicDnsName"
              ]
            },
            ":8080"
          ]
        ]
      }
    },
    "StelligentDemoELBDNSNAME": {
      "Value": {
        "Fn::Join": [
          "", [
            "http://", {
              "Fn::GetAtt": [
                "NandoDemoELB",
                "DNSName"
              ]
            }
          ]
        ]
      }
    },
    "StelligentDemoBucketURL": {
      "Value": {
        "Ref": "StelligentDemoBucketURL"
      }
    },
    "StelligentDemoCNAME": {
      "Value": {
        "Fn::Join": [
          ".", [{
            "Fn::Join": [
              "-", [
                "http://nando-automation-demo", {
                  "Ref": "DemoRegion"
                }, {
                  "Ref": "HashID"
                }
              ]
            ]
          }, {
            "Ref": "StelligentDemoZoneName"
          }]
        ]
      }
    },
    "StelligentDemoBucketCNAME": {
      "Value": {
        "Ref": "StelligentDemoBucketCNAME"
      }
    },
    "StelligentDemoJenkinsCNAME": {
      "Value": {
        "Fn::Join": [
          "", [
            "http://nando-automation-demo-jenkins-", {
              "Ref": "DemoRegion"
            },
            "-", {
              "Ref": "HashID"
            },
            ".", {
              "Ref": "StelligentDemoZoneName"
            },
            ":8080"
          ]
        ]
      }
    },
    "SSHCommandToJenkins": {
      "Value": {
        "Fn::Join": [
          "", [
            "ssh -i ", {
              "Ref": "KeyName"
            },
            ".pem ec2-user@", {
              "Ref": "NandoDemoJenkinsEIP"
            }
          ]
        ]
      }
    }
  }
}
